#include "CosSin.h"

#include <stdint.h>
#include <limits>
#include <fenv.h>

static const double cos_quarter_coeffs[128][8] = {
	{-1.4231307285064850879e-14, 9.4500856695728814970e-10, -8.3015438241989090854e-15, -7.5299105841326410848e-05, -1.6677163725760655897e-16, 2.3162707930913202776e-18, 1.0000000000000000000e+00},
	{-4.2691778672664282181e-14, 9.4493740867954438183e-10, 3.7798670513750111525e-09, -7.5293435957142631565e-05, -1.5059443174494645018e-04, 4.0247016942103184997e-17, 9.9992470183914450299e-01},
	{-7.1145820835428311154e-14, 9.4472394630380654527e-10, 7.5591731702193529154e-09, -7.5276427158454714658e-05, -3.0116618452223522899e-04, -2.7536237109227128016e-17, 9.9969881869620424997e-01},
	{-9.9589148699269426604e-14, 9.4436821197672302775e-10, 1.1337340905389083692e-08, -7.5248082006725203934e-05, -4.5169258277991120032e-04, -4.0544322949163205935e-17, 9.9932238458834954375e-01},
	{-1.2801747880363409242e-13, 9.4387025927057506373e-10, 1.5113801278720481023e-08, -7.5208404770629681672e-05, -6.0215095779607636425e-04, -9.9788601606238357886e-18, 9.9879545620517240501e-01},
	{-1.5642652994657624640e-13, 9.4323016317520862151e-10, 1.8887985569172234726e-08, -7.5157401425413958708e-05, -7.5251865109288282232e-04, 3.0246590115165516204e-17, 9.9811811290014917919e-01},
	{-1.8481202382949044036e-13, 9.4244802008674131991e-10, 2.2659325398472739154e-08, -7.5095079651994213737e-05, -9.0277301784881579336e-04, 1.1473793431217712989e-17, 9.9729045667869020697e-01},
	{-2.1316968570140795122e-13, 9.4152394779304499493e-10, 2.6427252816715781807e-08, -7.5021448835800285120e-05, -1.0528914303089209007e-03, 1.3643095392282940931e-17, 9.9631261218277800129e-01},
	{-2.4149524500275858724e-13, 9.4045808545600846588e-10, 3.0191200387891703570e-08, -7.4936520065362264274e-05, -1.2028512811924605991e-03, -4.0183089936194802463e-17, 9.9518472667219692873e-01},
	{-2.6978443600850108984e-13, 9.3925059359057905340e-10, 3.3950601275341174558e-08, -7.4840306130640580381e-05, -1.3526299870974872394e-03, -1.6664146434944172847e-17, 9.9390697000235606051e-01},
	{-2.9803299847052589028e-13, 9.3790165404058988041e-10, 3.7704889327118704701e-08, -7.4732821521099915231e-05, -1.5022049919018213519e-03, 3.3390290948263842482e-17, 9.9247953459870996706e-01},
	{-3.2623667825923255365e-13, 9.3641146995137585116e-10, 4.1453499161253054537e-08, -7.4614082423527083713e-05, -1.6515537701599191777e-03, 1.7687987808787475037e-17, 9.9090263542778000971e-01},
	{-3.5439122800418616150e-13, 9.3478026573917892868e-10, 4.5195866250891668669e-08, -7.4484106719593435632e-05, -1.8006538304951231252e-03, -3.8698045742465400457e-17, 9.8917650996478101444e-01},
	{-3.8249240773375572315e-13, 9.3300828705735408446e-10, 4.8931427009316360213e-08, -7.4342913983161887240e-05, -1.9494827189867796127e-03, -5.0047500335540132186e-17, 9.8730141815785843473e-01},
	{-4.1053598551363823575e-13, 9.3109580075937230141e-10, 5.2659618874817381918e-08, -7.4190525477339205928e-05, -2.0980180225517179766e-03, 2.5435550597078974022e-17, 9.8527764238894122162e-01},
	{-4.3851773808417246763e-13, 9.2904309485863582945e-10, 5.6379880395413165249e-08, -7.4026964151273846209e-05, -2.2462373723195765314e-03, 4.4444730394473303484e-17, 9.8310548743121628501e-01},
	{-4.6643345149634613554e-13, 9.2685047848510269540e-10, 6.0091651313402889567e-08, -7.3852254636699865564e-05, -2.3941184470014746644e-03, 2.0816129606918211911e-17, 9.8078528040323043058e-01},
	{-4.9427892174640166109e-13, 9.2451828183873370185e-10, 6.3794372649739288418e-08, -7.3666423244227557097e-05, -2.5416389762515138005e-03, -1.9359767618351544837e-17, 9.7831737071962765473e-01},
	{-5.2204995540894286417e-13, 9.2204685613976522390e-10, 6.7487486788208762454e-08, -7.3469497959381056514e-05, -2.6887767440206124074e-03, -2.3315457307222088969e-17, 9.7570213003852857003e-01},
	{-5.4974237026845005071e-13, 9.1943657357581710941e-10, 7.1170437559406437575e-08, -7.3261508438383926307e-05, -2.8355095919021596103e-03, -2.9060668099973068180e-17, 9.7293995220556017678e-01},
	{-5.7735199594910630698e-13, 9.1668782724584188674e-10, 7.4842670324493105483e-08, -7.3042486003692988191e-05, -2.9818154224689904196e-03, 2.0608948695507709132e-17, 9.7003125319454397424e-01},
	{-6.0487467454284013517e-13, 9.1380103110092624005e-10, 7.8503632058721870524e-08, -7.2812463639281257608e-05, -3.1276722026011764648e-03, 4.0732644623998573441e-17, 9.6697647104485207059e-01},
	{-6.3230626123549168551e-13, 9.1077661988195126618e-10, 8.2152771434721658379e-08, -7.2571475985670752789e-05, -3.2730579668041330683e-03, 2.8692796991471299931e-17, 9.6377606579543984022e-01},
	{-6.5964262493100635657e-13, 9.0761504905412164619e-10, 8.5789538905525013445e-08, -7.2319559334715679817e-05, -3.4179508205165426253e-03, 2.6874846233084953888e-17, 9.6043051941556578655e-01},
	{-6.8687964887356276630e-13, 9.0431679473837510519e-10, 8.9413386787327929400e-08, -7.2056751624137037240e-05, -3.5623289434075933874e-03, 4.2766571801551722416e-17, 9.5694033573220882438e-01},
	{-7.1401323126754068319e-13, 9.0088235363967950169e-10, 9.3023769341968941290e-08, -7.1783092431809358510e-05, -3.7061705926630427246e-03, -2.2986609543108815473e-17, 9.5330604035419386211e-01},
	{-7.4103928589523682890e-13, 8.9731224297223150517e-10, 9.6620142859115382442e-08, -7.1498622969800418965e-05, -3.8494541062596039638e-03, -5.3591905926137570628e-18, 9.4952818059303667475e-01},
	{-7.6795374273223383866e-13, 8.9360700038156575415e-10, 1.0020196573814404777e-07, -7.1203386078164828906e-05, -3.9921579062271676103e-03, 4.8205091849343649574e-17, 9.4560732538052127971e-01},
	{-7.9475254856033119970e-13, 8.8976718386358731586e-10, 1.0376869856970435209e-07, -7.0897426218492502130e-05, -4.1342605018983638598e-03, -2.5719954608207637590e-17, 9.4154406518302080631e-01},
	{-8.2143166757794506952e-13, 8.8579337168054006216e-10, 1.0731980421695133083e-07, -7.0580789467212907908e-05, -4.2757404931449798091e-03, -3.4404393537791652165e-17, 9.3733901191257495977e-01},
	{-8.4798708200788478450e-13, 8.8168616227392171507e-10, 1.1085474789643649243e-07, -7.0253523508656095771e-05, -4.4165765736007374029e-03, 4.4197729837173412431e-17, 9.3299279883473884567e-01},
	{-8.7441479270241568710e-13, 8.7744617417436148505e-10, 1.1437299725864426681e-07, -6.9915677627871645051e-05, -4.5567475338699559365e-03, -2.1160868764478256020e-17, 9.2850608047321558924e-01},
	{-9.0071081974551608202e-13, 8.7307404590847136561e-10, 1.1787402246816183421e-07, -6.9567302703206501408e-05, -4.6962322647216090538e-03, 1.9779951825330513734e-17, 9.2387953251128673848e-01},
	{-9.2687120305223764661e-13, 8.6857043590268607689e-10, 1.2135729628347043611e-07, -6.9208451198642920079e-05, -4.8350097602682948553e-03, -2.4372767733165925705e-17, 9.1911385169005777040e-01},
	{-9.5289200296507952938e-13, 8.6393602238410706452e-10, 1.2482229413634595256e-07, -6.8839177155897505176e-05, -4.9730591211296472712e-03, -3.4203973314402544521e-17, 9.1420975570353069095e-01},
	{-9.7876930084728727953e-13, 8.5917150327836337492e-10, 1.2826849421085700649e-07, -6.8459536186282822262e-05, -5.1103595575797073139e-03, -1.5874729624292462979e-18, 9.0916798309052238025e-01},
	{-1.0044991996729839128e-12, 8.5427759610450719155e-10, 1.3169537752194851155e-07, -6.8069585462332424458e-05, -5.2468903926777745589e-03, -4.5215130987680808507e-18, 9.0398929312344333820e-01},
	{-1.0300778246140480938e-12, 8.4925503786695757712e-10, 1.3510242799359889772e-07, -6.7669383709191026810e-05, -5.3826310653822852237e-03, 2.8392691272817807802e-17, 8.9867446569395381673e-01},
	{-1.0555013236236494667e-12, 8.4410458494451072319e-10, 1.3848913253653922232e-07, -6.7258991195770587851e-05, -5.5175611336472224489e-03, -2.0531082671589720139e-18, 8.9322430119551532446e-01},
	{-1.0807658680163522762e-12, 8.3882701297643190652e-10, 1.4185498112552261242e-07, -6.6838469725674060193e-05, -5.6516602775006164264e-03, 1.4855027720298779718e-17, 8.8763962040285393496e-01},
	{-1.1058676530447008469e-12, 8.3342311674564714344e-10, 1.4519946687613212727e-07, -6.6407882627888070531e-05, -5.7849083021046599287e-03, -1.7806701163292325041e-17, 8.8192126434835504956e-01},
	{-1.1308028984722018980e-12, 8.2789371005905160277e-10, 1.4852208612111571155e-07, -6.5967294747245708124e-05, -5.9172851407969708631e-03, 7.8957544104766985943e-18, 8.7607009419540660122e-01},
	{-1.1555678491426130208e-12, 8.2223962562495359568e-10, 1.5182233848623661945e-07, -6.5516772434661197148e-05, -6.0487708581125638335e-03, -3.9879658771292946108e-17, 8.7008699110871146054e-01},
	{-1.1801587755454559332e-12, 8.1646171492767140990e-10, 1.5509972696562795373e-07, -6.5056383537137645523e-05, -6.1793456527860519262e-03, 4.3480905639177010698e-17, 8.6397285612158669643e-01},
	{-1.2045719743776668644e-12, 8.1056084809930346097e-10, 1.5835375799663988516e-07, -6.4586197387549591407e-05, -6.3089898607336511102e-03, -4.6203501041808386355e-17, 8.5772861000027211809e-01},
	{-1.2288037691013002630e-12, 8.0453791378868871774e-10, 1.6158394153416843467e-07, -6.4106284794201675485e-05, -6.4376839580145119382e-03, -5.1314828511494636881e-17, 8.5135519310526519554e-01},
	{-1.2528505104972026249e-12, 7.9839381902758056317e-10, 1.6478979112445438365e-07, -6.3616718030165200900e-05, -6.5654085637709578768e-03, -4.1681511251054472006e-17, 8.4485356524970711689e-01},
	{-1.2767085772145704104e-12, 7.9212948909405001372e-10, 1.6797082397834148588e-07, -6.3117570822394058029e-05, -6.6921444431471705655e-03, -3.3625726535820449505e-17, 8.3822470555483807875e-01},
	{-1.3003743763163128881e-12, 7.8574586737314321600e-10, 1.7112656104398267882e-07, -6.2608918340621735302e-05, -6.8178725101858874552e-03, 3.3259623794392499713e-18, 8.3146961230254523567e-01},
	{-1.3238443438201350859e-12, 7.7924391521481048830e-10, 1.7425652707898362668e-07, -6.2090837186041028788e-05, -6.9425738307026764115e-03, -2.4609854574561029815e-17, 8.2458930278502529099e-01},
	{-1.3471149452352600711e-12, 7.7262461178913079157e-10, 1.7736025072197234583e-07, -6.1563405379768131086e-05, -7.0662296251373553357e-03, -1.2997001175171456401e-17, 8.1758481315158371139e-01},
	{-1.3701826760947109905e-12, 7.6588895393885230962e-10, 1.8043726456358464207e-07, -6.1026702351093057837e-05, -7.1888212713821239910e-03, 2.5389874662996913253e-17, 8.1045719825259476821e-01},
	{-1.3930440624830698706e-12, 7.5903795602927157561e-10, 1.8348710521685405740e-07, -6.0480808925517760355e-05, -7.3103303075859847604e-03, -3.1208025356682167922e-17, 8.0320753148064494287e-01},
	{-1.4156956615596376497e-12, 7.5207264979547389246e-10, 1.8650931338699642632e-07, -5.9925807312584180859e-05, -7.4307384349350307992e-03, -2.8227342261205199658e-17, 7.9583690460888356633e-01},
	{-1.4381340620769122373e-12, 7.4499408418695758774e-10, 1.8950343394057787163e-07, -5.9361781093493761418e-05, -7.5500275204081809116e-03, 3.6214897485470914163e-17, 7.8834642762660622761e-01},
	{-1.4603558848943110936e-12, 7.3780332520966640148e-10, 1.9246901597405631350e-07, -5.8788815208520459814e-05, -7.6681795995079404804e-03, -8.1197259042565201210e-18, 7.8073722857209448822e-01},
	{-1.4823577834870559334e-12, 7.3050145576545254769e-10, 1.9540561288168571857e-07, -5.8206995944219007053e-05, -7.7851768789657955355e-03, -3.0783777856553520094e-17, 7.7301045336273699338e-01},
	{-1.5041364444501480641e-12, 7.2308957548899588518e-10, 1.9831278242277348053e-07, -5.7616410920430520710e-05, -7.9010017394218097497e-03, -3.0943387942852340899e-17, 7.6516726562245895860e-01},
	{-1.5256885879973545886e-12, 7.1556880058220308276e-10, 2.0119008678828013268e-07, -5.7017149077087222390e-05, -8.0156367380780357834e-03, -1.8163818242532384916e-17, 7.5720884650648456748e-01},
	{-1.5470109684551323689e-12, 7.0794026364611149066e-10, 2.0403709266675173072e-07, -5.6409300660818475137e-05, -8.1290646113253359206e-03, -4.3002617879916810384e-17, 7.4913639452345937020e-01},
	{-1.5681003747514144213e-12, 7.0020511351032377443e-10, 2.0685337130957516518e-07, -5.5792957211359929732e-05, -8.2412682773432190814e-03, -1.3001236351521288846e-17, 7.4095112535495910588e-01},
	{-1.5889536308991854379e-12, 6.9236451505999823014e-10, 2.0963849859554584186e-07, -5.5168211547767968610e-05, -8.3522308386723021628e-03, 2.0606716990792316216e-17, 7.3265427167241281570e-01},
	{-1.6095675964747737324e-12, 6.8441964906042156086e-10, 2.1239205509473904822e-07, -5.4535157754441554814e-05, -8.4619355847590019271e-03, 3.0866923538921167840e-17, 7.2424708295146689174e-01},
	{-1.6299391670907879185e-12, 6.7637171197918965355e-10, 2.1511362613167436496e-07, -5.3893891166953390107e-05, -8.5703659944720810004e-03, -4.9932408839357685314e-17, 7.1573082528381870571e-01},
	{-1.6500652748636256188e-12, 6.6822191580602427382e-10, 2.1780280184776436117e-07, -5.3244508357692794617e-05, -8.6775057385906767538e-03, -4.6707947772224852838e-17, 7.0710678118654757274e-01},
	{-1.6699428888754861489e-12, 6.5997148787025194147e-10, 2.2045917726303772641e-07, -5.2587107121322225662e-05, -8.7833386822634140767e-03, 5.0596465139754253345e-17, 6.9837624940897280457e-01},
	{-1.6895690156308144743e-12, 6.5162167065597228373e-10, 2.2308235233712789278e-07, -5.1921786460049766828e-05, -8.8878488874382637758e-03, -1.4301718868073416617e-17, 6.8954054473706694051e-01},
	{-1.7089406995071122208e-12, 6.4317372161494471423e-10, 2.2567193202951745930e-07, -5.1248646568719762441e-05, -8.9910206152627406700e-03, 3.0040080416515317628e-17, 6.8060099779545302212e-01},
	{-1.7280550232000420276e-12, 6.3462891297722083804e-10, 2.2822752635902997438e-07, -5.0567788819723847194e-05, -9.0928383284541326043e-03, -3.8943304004411969057e-17, 6.7155895484701844111e-01},
	{-1.7469091081627638497e-12, 6.2598853155955122377e-10, 2.3074875046255962703e-07, -4.9879315747734634162e-05, -9.1932866936393475149e-03, -2.1091061239804741097e-17, 6.6241577759017178373e-01},
	{-1.7655001150394329332e-12, 6.1725387857159539086e-10, 2.3323522465303024383e-07, -4.9183331034264344834e-05, -9.2923505836640662991e-03, 1.0072496176829481030e-17, 6.5317284295377675551e-01},
	{-1.7838252440927970595e-12, 6.0842626941996499717e-10, 2.3568657447657469812e-07, -4.8479939492050813828e-05, -9.3900150798708371946e-03, -3.0603608835379609272e-17, 6.4383154288979149715e-01},
	{-1.8018817356258256099e-12, 5.9950703351012762741e-10, 2.3810243076892634012e-07, -4.7769247049273002811e-05, -9.4862654743457681950e-03, 1.1880126816028049979e-17, 6.3439328416364548779e-01},
	{-1.8196668703973108736e-12, 5.9049751404620375245e-10, 2.4048242971101371332e-07, -4.7051360733598679930e-05, -9.5810872721334913726e-03, 3.5108886097172154734e-17, 6.2485948814238634341e-01},
	{-1.8371779700313749573e-12, 5.8139906782868519062e-10, 2.4282621288375053654e-07, -4.6326388656066378932e-05, -9.6744661934200382875e-03, 2.7646056587428277029e-17, 6.1523159058062681925e-01},
	{-1.8544123974208243379e-12, 5.7221306505010536637e-10, 2.4513342732201208441e-07, -4.5594439994804321391e-05, -9.7663881756833402503e-03, -2.9810647952314142870e-17, 6.0551104140432554512e-01},
	{-1.8713675571242866248e-12, 5.6294088908869414338e-10, 2.4740372556779055468e-07, -4.4855624978588578850e-05, -9.8568393758109839470e-03, -1.2069441308533339125e-17, 5.9569930449243335691e-01},
	{-1.8880408957570770277e-12, 5.5358393630004535630e-10, 2.4963676572252087265e-07, -4.4110054870243015990e-05, -9.9458061721849344572e-03, -2.4023796779086714872e-18, 5.8579785745643886408e-01},
	{-1.9044299023757266736e-12, 5.4414361580683167914e-10, 2.5183221149856965350e-07, -4.3357841949883528813e-05, -1.0033275166732904746e-02, -3.6586557778272432140e-17, 5.7580819141784533866e-01},
	{-1.9205321088561224885e-12, 5.3462134928659495468e-10, 2.5398973226987834931e-07, -4.2599099498009071506e-05, -1.0119233186946050701e-02, -3.2796573983320883174e-17, 5.6573181078361323149e-01},
	{-1.9363450902651964437e-12, 5.2501857075764755352e-10, 2.5610900312175491619e-07, -4.1833941778442006306e-05, -1.0203667287862707228e-02, 4.8369987250720231148e-17, 5.5557023301960217765e-01},
	{-1.9518664652261136790e-12, 5.1533672636311412767e-10, 2.5818970489980426066e-07, -4.1062484021120446219e-05, -1.0286564754017851406e-02, -4.0265759603957335846e-17, 5.4532498842204646383e-01},
	{-1.9670938962768969000e-12, 5.0557727415314787998e-10, 2.6023152425799206544e-07, -4.0284842404744989383e-05, -1.0367913101357997818e-02, -5.2455083239927250752e-17, 5.3499761988709726435e-01},
	{-1.9820250902224405999e-12, 4.9574168386535350601e-10, 2.6223415370583341849e-07, -3.9501134039282677563e-05, -1.0447700079121262362e-02, -4.1865012977380318032e-17, 5.2458968267846894928e-01},
	{-1.9966577984798581578e-12, 4.8583143670345020567e-10, 2.6419729165469968068e-07, -3.8711476948330638553e-05, -1.0525913671682270156e-02, -4.4533226162937370377e-17, 5.1410274419322177231e-01},
	{-2.0109898174171093056e-12, 4.7584802511420785202e-10, 2.6612064246323676304e-07, -3.7915990051342177202e-05, -1.0602542100361678559e-02, -1.5576379171867466840e-17, 5.0353838372571757542e-01},
	{-2.0250189886848594969e-12, 4.6579295256268992133e-10, 2.6800391648188756071e-07, -3.7114793145717964585e-05, -1.0677573825199985699e-02, 1.0441960980137297125e-19, 4.9289819222978403790e-01},
	{-2.0387431995415186707e-12, 4.5566773330583720219e-10, 2.6984683009651203216e-07, -3.6308006888764940965e-05, -1.0750997546695421556e-02, -2.4756194608086363606e-17, 4.8218377207912277438e-01},
	{-2.0521603831714141736e-12, 4.4547389216442624988e-10, 2.7164910577109862380e-07, -3.5495752779525812433e-05, -1.0822802207505602401e-02, 7.5969215384138093264e-18, 4.7139673682599764204e-01},
	{-2.0652685189960429112e-12, 4.3521296429343706897e-10, 2.7341047208956005198e-07, -3.4678153140481729792e-05, -1.0892976994112726560e-02, 1.9543795298750437953e-17, 4.6053871095824000514e-01},
	{-2.0780656329783655688e-12, 4.2488649495086440392e-10, 2.7513066379660751308e-07, -3.3855331099130968580e-05, -1.0961511338452058217e-02, 5.9128257522028540043e-18, 4.4961132965460659516e-01},
	{-2.0905497979200875689e-12, 4.1449603926500753432e-10, 2.7680942183769733973e-07, -3.3027410569446361422e-05, -1.1028394919503423446e-02, -1.9879222038641056994e-17, 4.3861623853852765853e-01},
	{-2.1027191337518896063e-12, 4.0404316200027357493e-10, 2.7844649339804348538e-07, -3.2194516233214369374e-05, -1.1093617664845538059e-02, 1.0389592859332416600e-17, 4.2755509343028208491e-01},
	{-2.1145718078165572737e-12, 3.9352943732152990085e-10, 2.8004163194069054362e-07, -3.1356773521258387584e-05, -1.1157169752172860222e-02, -2.4523015463391309395e-17, 4.1642956009763720804e-01},
	{-2.1261060351449742351e-12, 3.8295644855704064633e-10, 2.8159459724364147863e-07, -3.0514308594549382028e-05, -1.1219041610774799569e-02, 1.0837723597956267313e-17, 4.0524131400498986100e-01},
	{-2.1373200787249308837e-12, 3.7232578796002325948e-10, 2.8310515543603382000e-07, -2.9667248325206486482e-05, -1.1279223922977034758e-02, 1.0665386481663720129e-17, 3.9399204006104809883e-01},
	{-2.1482122497627125360e-12, 3.6163905646886094024e-10, 2.8457307903336008683e-07, -2.8815720277390531162e-05, -1.1337707625544715673e-02, -9.1765670713611556751e-18, 3.8268343236508978178e-01},
	{-2.1587809079374259669e-12, 3.5089786346600740915e-10, 2.8599814697172598227e-07, -2.7959852688093349027e-05, -1.1394483911047356001e-02, 1.1953096769919009820e-18, 3.7131719395183754306e-01},
	{-2.1690244616480238934e-12, 3.4010382653561973084e-10, 2.8738014464114180597e-07, -2.7099774447825763401e-05, -1.1449544229185197597e-02, -1.6780385866084603983e-17, 3.5989503653498816638e-01},
	{-2.1789413682529971174e-12, 3.2925857121995589839e-10, 2.8871886391784189609e-07, -2.6235615081207136798e-05, -1.1502880288076857557e-02, 4.4921036014718939022e-18, 3.4841868024943456472e-01},
	{-2.1885301343026870695e-12, 3.1836373077457460845e-10, 2.9001410319562744246e-07, -2.5367504727459459156e-05, -1.1554484055508053297e-02, 3.4789276890693223446e-19, 3.3688985339222005111e-01},
	{-2.1977893157641981567e-12, 3.0742094592237248572e-10, 2.9126566741622742960e-07, -2.4495574120808838404e-05, -1.1604347760141221768e-02, 8.6581520915664327468e-18, 3.2531029216226292622e-01},
	{-2.2067175182388590212e-12, 2.9643186460649753085e-10, 2.9247336809867384522e-07, -2.3619954570797429178e-05, -1.1652463892685857583e-02, 1.5274487825144561082e-17, 3.1368174039889146210e-01},
	{-2.2153133971722185760e-12, 2.8539814174217498094e-10, 2.9363702336768617783e-07, -2.2740777942508679551e-05, -1.1698825207029386192e-02, -1.6480719861977661925e-17, 3.0200594931922808417e-01},
	{-2.2235756580565267325e-12, 2.7432143896748285749e-10, 2.9475645798106123292e-07, -2.1858176636708941750e-05, -1.1743424721328398624e-02, -1.8268229937977306209e-17, 2.9028467725446238656e-01},
	{-2.2315030566256856842e-12, 2.6320342439311587239e-10, 2.9583150335606376791e-07, -2.0972283569908408047e-05, -1.1786255719060088204e-02, -9.3978219089724490470e-18, 2.7851968938505311524e-01},
	{-2.2390943990426301454e-12, 2.5204577235117351932e-10, 2.9686199759481471660e-07, -2.0083232154344366974e-05, -1.1827311750033743520e-02, 2.1546282185255599073e-17, 2.6671275747489836538e-01},
	{-2.2463485420791155423e-12, 2.4085016314301226203e-10, 2.9784778550867207958e-07, -1.9191156277889818971e-05, -1.1866586631362115514e-02, 4.4155328446656864934e-19, 2.5486565960451457169e-01},
	{-2.2532643932878826517e-12, 2.2961828278619824117e-10, 2.9878871864160209854e-07, -1.8296190283890436458e-05, -1.1904074448392540711e-02, -8.2014255519410648885e-18, 2.4298017990326389870e-01},
	{-2.2598409111671788972e-12, 2.1835182276059901541e-10, 2.9968465529253600270e-07, -1.7398468950932981984e-05, -1.1939769555597664480e-02, 1.0652139993906309358e-17, 2.3105810828067110951e-01},
	{-2.2660771053176011643e-12, 2.0705247975365318837e-10, 3.0053546053670962744e-07, -1.6498127472548111824e-05, -1.1973666577425639418e-02, 1.2948292310181388136e-19, 2.1910124015686979759e-01},
	{-2.2719720365912496313e-12, 1.9572195540485532560e-10, 3.0134100624598272893e-07, -1.5595301436850760019e-05, -1.2005760409109660081e-02, -1.0146547769039336756e-17, 2.0711137619221856032e-01},
	{-2.2775248172331570750e-12, 1.8436195604949542657e-10, 3.0210117110813455339e-07, -1.4690126806121043770e-05, -1.2036046217436728242e-02, -7.5521408952767812635e-18, 1.9509032201612827584e-01},
	{-2.2827346110149839569e-12, 1.7297419246169105401e-10, 3.0281584064513285556e-07, -1.3782739896328858074e-05, -1.2064519441475506437e-02, 8.1459873528272795265e-18, 1.8303988795514095078e-01},
	{-2.2876006333609498048e-12, 1.6156037959675102362e-10, 3.0348490723037424841e-07, -1.2873277356605188602e-05, -1.2091175793263188656e-02, 9.5749889185099160953e-18, 1.7096188876030121717e-01},
	{-2.2921221514659879664e-12, 1.5012223633290948022e-10, 3.0410827010489196684e-07, -1.1961876148663249736e-05, -1.2116011258451245963e-02, -3.6613914177022731991e-18, 1.5885814333386144570e-01},
	{-2.2962984844061031354e-12, 1.3866148521246921171e-10, 3.0468583539253003947e-07, -1.1048673526172561452e-05, -1.2139022096909972415e-02, 4.0537600751322237116e-18, 1.4673047445536174793e-01},
	{-2.3001290032409163016e-12, 1.2717985218239297519e-10, 3.0521751611408053315e-07, -1.0133807014089044865e-05, -1.2160204843291735899e-02, -8.8683879174852504400e-18, 1.3458070850712619548e-01},
	{-2.3036131311083809701e-12, 1.1567906633438231999e-10, 3.0570323220038254695e-07, -9.2174143879442789283e-06, -1.2179556307552848876e-02, 3.1058882449462809885e-18, 1.2241067519921619566e-01},
	{-2.3067503433116557052e-12, 1.0416085964448274642e-10, 3.0614291050438004383e-07, -8.2996336530970048754e-06, -1.2197073575433974024e-02, -3.2570757012405738737e-19, 1.1022220729388305938e-01},
	{-2.3095401673981224967e-12, 9.2626966712254478407e-11, 3.0653648481213767288e-07, -7.3806030239500242807e-06, -1.2212754008899000605e-02, -1.4206820002270852471e-18, 9.8017140329560603629e-02},
	{-2.3119821832305351980e-12, 8.1079124499548102234e-11, 3.0688389585281241178e-07, -6.4604609031356290016e-06, -1.2226595246532325628e-02, -3.2026083368959688587e-18, 8.5797312344439893850e-02},
	{-2.3140760230502923804e-12, 6.9519072068924556452e-11, 3.0718509130757938825e-07, -5.5393458606726648339e-06, -1.2238595203894477373e-02, -2.6212603681225946449e-18, 7.3564563599667426308e-02},
	{-2.3158213715328188528e-12, 5.7948550321758673466e-11, 3.0744002581751103345e-07, -4.6173966130983976300e-06, -1.2248752073836011861e-02, -3.8294850063857959247e-19, 6.1320736302208578294e-02},
	{-2.3172179658350526135e-12, 4.6369301736065848278e-11, 3.0764866099040782038e-07, -3.6947520025783180216e-06, -1.2257064326769677096e-02, -5.7913788081070028077e-19, 4.9067674327418014935e-02},
	{-2.3182655956350291591e-12, 3.4783070104091274078e-11, 3.0781096540658021662e-07, -2.7715509759970162263e-06, -1.2263530710900758317e-02, 6.8266789972213841132e-19, 3.6807222941358831714e-02},
	{-2.3189641031635546661e-12, 2.3191600269701207022e-11, 3.0792691462358005160e-07, -1.8479325640332946295e-06, -1.2268150252415588666e-02, -4.8217811020103213199e-20, 2.4541228522912288124e-02},
	{-2.3193133832279636034e-12, 1.1596637865615932548e-11, 3.0799649117988177471e-07, -9.2403586022265999915e-07, -1.2270922255628207917e-02, 7.0720684929562924422e-19, 1.2271538285719925387e-02}
};

static const double sin_quarter_coeffs[128][8] = {
	{2.3193133832279636034e-12, 7.0949476115549512740e-17, -3.0801968459751196319e-07, 1.0346788203949281168e-17, 1.2271846303085129359e-02, 4.2608173510954350237e-37, 1.3197426566665915283e-20},
	{2.3189641031635546661e-12, 1.1596779753883433288e-11, -3.0799649138362723866e-07, -9.2403586020196804304e-07, 1.2270922255628204448e-02, 7.3359971494506412602e-19, 1.2271538285719925387e-02},
	{2.3182655956350291591e-12, 2.3191742125916124647e-11, -3.0792691503104022162e-07, -1.8479325640126073321e-06, 1.2268150252415579993e-02, -2.1830907523051578646e-20, 2.4541228522912288124e-02},
	{2.3172179658350526135e-12, 3.4783211906890586826e-11, -3.0781096601769373576e-07, -2.7715509759763367640e-06, 1.2263530710900746173e-02, 7.0904486729619884440e-19, 3.6807222941358831714e-02},
	{2.3158213715328188528e-12, 4.6369443464094580010e-11, -3.0764866180508273262e-07, -3.6947520025576495707e-06, 1.2257064326769661483e-02, -5.5277482143392556257e-19, 4.9067674327418014935e-02},
	{2.3140760230502923804e-12, 5.7948691953673095761e-11, -3.0744002683562457196e-07, -4.6173966130777435786e-06, 1.2248752073835991044e-02, -3.5660331963886187191e-19, 6.1320736302208578294e-02},
	{2.3119821832305351980e-12, 6.9519213583395429475e-11, -3.0718509252897829300e-07, -5.5393458606520268761e-06, 1.2238595203894451352e-02, -2.5949370329872872574e-18, 7.3564563599667426308e-02},
	{2.3095401673981224967e-12, 8.1079265875263873597e-11, -3.0688389727731271780e-07, -6.4604609031150122197e-06, 1.2226595246532297873e-02, -3.1763108118225183382e-18, 8.5797312344439893850e-02},
	{2.3067503433116557052e-12, 9.2627107927924475570e-11, -3.0653648643952481614e-07, -7.3806030239294303686e-06, 1.2212754008898967645e-02, -1.3944142455260376285e-18, 9.8017140329560603629e-02},
	{2.3036131311083809701e-12, 1.0416100067884041433e-10, -3.0614291233440896711e-07, -8.2996336530764372214e-06, 1.2197073575433937595e-02, -2.9947354162265037735e-19, 1.1022220729388305938e-01},
	{2.3001290032409163016e-12, 1.1567920716618838763e-10, -3.0570323423277769985e-07, -9.2174143879237417675e-06, 1.2179556307552808977e-02, 3.1320845964998514773e-18, 1.2241067519921619566e-01},
	{2.2962984844061031354e-12, 1.2717999279043868674e-10, -3.0521751834853587207e-07, -1.0133807014068539891e-05, 1.2160204843291690796e-02, -8.8422331879537033576e-18, 1.3458070850712619548e-01},
	{2.2921221514659879664e-12, 1.3866162557557955776e-10, -3.0468583782870897470e-07, -1.1048673526152092054e-05, 1.2139022096909923842e-02, 4.0798692438356854071e-18, 1.4673047445536174793e-01},
	{2.2876006333609498048e-12, 1.5012237642994627379e-10, -3.0410827274242768017e-07, -1.1961876148642819302e-05, 1.2116011258451192187e-02, -3.6353317417716666587e-18, 1.5885814333386144570e-01},
	{2.2827346110149839569e-12, 1.6156051940661611847e-10, -3.0348491006886948139e-07, -1.2873277356584800519e-05, 1.2091175793263131411e-02, 9.6009951771763282564e-18, 1.7096188876030121717e-01},
	{2.2775248172331570750e-12, 1.7297433196332965331e-10, -3.0281584368416017419e-07, -1.3782739896308514037e-05, 1.2064519441475445721e-02, 8.1719362777825979803e-18, 1.8303988795514095078e-01},
	{2.2719720365912496313e-12, 1.8436209522189908148e-10, -3.0210117434723624224e-07, -1.4690126806100747167e-05, 1.2036046217436662323e-02, -7.5262532118452029853e-18, 1.9509032201612827584e-01},
	{2.2660771053176011643e-12, 1.9572209422706519225e-10, -3.0134100968467105583e-07, -1.5595301436830512543e-05, 1.2005760409109590692e-02, -1.0120725225721404338e-17, 2.0711137619221856032e-01},
	{2.2598409111671788972e-12, 2.0705261820476312981e-10, -3.0053546417446673764e-07, -1.6498127472527921946e-05, 1.1973666577425564825e-02, 1.5523643752605988120e-19, 2.1910124015686979759e-01},
	{2.2532643932878826517e-12, 2.1835196081975883276e-10, -2.9968465912881402468e-07, -1.7398468950912846317e-05, 1.1939769555597586417e-02, 1.0677820601052327299e-17, 2.3105810828067110951e-01},
	{2.2463485420791155423e-12, 2.2961842043261669805e-10, -2.9878872267582335585e-07, -1.8296190283870365166e-05, 1.1904074448392459179e-02, -8.1758217194782526547e-18, 2.4298017990326389870e-01},
	{2.2390943990426301454e-12, 2.4085030035596036738e-10, -2.9784778974022898489e-07, -1.9191156277869808665e-05, 1.1866586631362030513e-02, 4.6707648640318507583e-19, 2.5486565960451457169e-01},
	{2.2315030566256856842e-12, 2.5204590910998742256e-10, -2.9686200202306998350e-07, -2.0083232154324424430e-05, 1.1827311750033655049e-02, 2.1571720912965689232e-17, 2.6671275747489836538e-01},
	{2.2235756580565267325e-12, 2.6320356067720022383e-10, -2.9583150798035056971e-07, -2.0972283569888533266e-05, 1.1786255719059994529e-02, -9.3724714864677067548e-18, 2.7851968938505311524e-01},
	{2.2153133971722185760e-12, 2.7432157475631385858e-10, -2.9475646280068314972e-07, -2.1858176636689138119e-05, 1.1743424721328301480e-02, -1.8242971638358291020e-17, 2.9028467725446238656e-01},
	{2.2067175182388590212e-12, 2.8539827701530322766e-10, -2.9363702838191746121e-07, -2.2740777942488950460e-05, 1.1698825207029285578e-02, -1.6455557489051395299e-17, 3.0200594931922808417e-01},
	{2.1977893157641981567e-12, 2.9643199934355147757e-10, -2.9247337330675925943e-07, -2.3619954570777781401e-05, 1.1652463892685753499e-02, 1.5299550482017276389e-17, 3.1368174039889146210e-01},
	{2.1885301343026870695e-12, 3.0742108010306118522e-10, -2.9126567281738272801e-07, -2.4495574120789271943e-05, 1.1604347760141112481e-02, 8.6831112580416534030e-18, 3.2531029216226292622e-01},
	{2.1789413682529971174e-12, 3.1836386437869091725e-10, -2.9001410878903920875e-07, -2.5367504727439974010e-05, 1.1554484055507940540e-02, 3.7274468622599829854e-19, 3.3688985339222005111e-01},
	{2.1690244616480238934e-12, 3.2925870422737957866e-10, -2.8871886970266780893e-07, -2.6235615081187739744e-05, 1.1502880288076741330e-02, 4.5168445270274688815e-18, 3.4841868024943456472e-01},
	{2.1587809079374259669e-12, 3.4010395892632029386e-10, -2.8738015061651063902e-07, -2.7099774447806454438e-05, 1.1449544229185077901e-02, -1.6755759658184905112e-17, 3.5989503653498816638e-01},
	{2.1482122497627125360e-12, 3.5089799522004737231e-10, -2.8599815313673786892e-07, -2.7959852688074134932e-05, 1.1394483911047231101e-02, 1.2198174586193971657e-18, 3.7131719395183754306e-01},
	{2.1373200787249308837e-12, 3.6163918756639861879e-10, -2.8457308538708662602e-07, -2.8815720277371411934e-05, 1.1337707625544587303e-02, -9.1521814067876287289e-18, 3.8268343236508978178e-01},
	{2.1261060351449742351e-12, 3.7232591838131581675e-10, -2.8310516197751818215e-07, -2.9667248325187468898e-05, 1.1279223922976902919e-02, 1.0689646356791889303e-17, 3.9399204006104809883e-01},
	{2.1145718078165572737e-12, 3.8295657828244714396e-10, -2.8159460397189851147e-07, -3.0514308594530466088e-05, 1.1219041610774664261e-02, 1.0861854030191121320e-17, 4.0524131400498986100e-01},
	{2.1027191337518896063e-12, 3.9352956633151409055e-10, -2.8004163885470703693e-07, -3.1356773521239576677e-05, 1.1157169752172719709e-02, -2.4499018108004107542e-17, 4.1642956009763720804e-01},
	{2.0905497979200875689e-12, 4.0404329027540710374e-10, -2.7844650049677817097e-07, -3.2194516233195660110e-05, 1.1093617664845395812e-02, 1.0413453523958514266e-17, 4.2755509343028208491e-01},
	{2.0780656329783655688e-12, 4.1449616678597258132e-10, -2.7680942912008120908e-07, -3.3027410569427767355e-05, 1.1028394919503277730e-02, -1.9855501658104388980e-17, 4.3861623853852765853e-01},
	{2.0652685189960429112e-12, 4.2488662169845688552e-10, -2.7513067126154381734e-07, -3.3855331099112482933e-05, 1.0961511338451907296e-02, 5.9364022764480327886e-18, 4.4961132965460659516e-01},
	{2.0521603831714141736e-12, 4.3521309024856917215e-10, -2.7341047973592461961e-07, -3.4678153140463366117e-05, 1.0892976994112573905e-02, 1.9567224416166296894e-17, 4.6053871095824000514e-01},
	{2.0387431995415186707e-12, 4.4547401730812958581e-10, -2.7164911359773996646e-07, -3.5495752779507563955e-05, 1.0822802207505444541e-02, 7.6201997206614465599e-18, 4.7139673682599764204e-01},
	{2.0250189886848594969e-12, 4.5566785761926564969e-10, -2.6984683810225145055e-07, -3.6308006888746807684e-05, 1.0750997546695260226e-02, -2.4733070866615570993e-17, 4.8218377207912277438e-01},
	{2.0109898174171093056e-12, 4.6579307602712231518e-10, -2.6800392466551946225e-07, -3.7114793145699960053e-05, 1.0677573825199820901e-02, 1.2738542814491000806e-19, 4.9289819222978403790e-01},
	{1.9966577984798581578e-12, 4.7584814771105092982e-10, -2.6612065082352871480e-07, -3.7915990051324301418e-05, 1.0602542100361510291e-02, -1.5553574735218949708e-17, 5.0353838372571757542e-01},
	{1.9820250902224405999e-12, 4.8583155841424129614e-10, -2.6419730019039262112e-07, -3.8711476948312884743e-05, 1.0525913671682100153e-02, -4.4510586542248159833e-17, 5.1410274419322177231e-01},
	{1.9670938962768969000e-12, 4.9574180467176332076e-10, -2.6223416241564192217e-07, -3.9501134039265059278e-05, 1.0447700079121087155e-02, -4.1842541582094008369e-17, 5.2458968267846894928e-01},
	{1.9518664652261136790e-12, 5.0557739403698351202e-10, -2.6023153314060444891e-07, -4.0284842404727506623e-05, 1.0367913101357819142e-02, -5.2432783454153310039e-17, 5.3499761988709726435e-01},
	{1.9363450902651964437e-12, 5.1533684530632153293e-10, -2.5818971395388284713e-07, -4.1062484021103098984e-05, 1.0286564754017669260e-02, -4.0243634785961483299e-17, 5.4532498842204646383e-01},
	{1.9205321088561224885e-12, 5.2501868874231434264e-10, -2.5610901234593619438e-07, -4.1833941778424801373e-05, 1.0203667287862523347e-02, 4.8391933769021789783e-17, 5.5557023301960217765e-01},
	{1.9044299023757266736e-12, 5.3462146629495308131e-10, -2.5398974166277318517e-07, -4.2599099497992008875e-05, 1.0119233186945861616e-02, -3.2774809069778558218e-17, 5.6573181078361323149e-01},
	{1.8880408957570770277e-12, 5.4414373182126002488e-10, -2.5183222105876350202e-07, -4.3357841949866615259e-05, 1.0033275166732712191e-02, -3.6564977747205255741e-17, 5.7580819141784533866e-01},
	{1.8713675571242866248e-12, 5.5358405130307262585e-10, -2.4963677544857409545e-07, -4.4110054870226244738e-05, 9.9458061721847384334e-03, -2.3809877791899428321e-18, 5.8579785745643886408e-01},
	{1.8544123974208243379e-12, 5.6294100306300124266e-10, -2.4740373545823831417e-07, -4.4855624978571956676e-05, 9.8568393758107844538e-03, -1.2048240763704321307e-17, 5.9569930449243335691e-01},
	{1.8371779700313749573e-12, 5.7221317797852829766e-10, -2.4513343737536497903e-07, -4.5594439994787855071e-05, 9.7663881756831390224e-03, -2.9789641954098906500e-17, 6.0551104140432554512e-01},
	{1.8196668703973108736e-12, 5.8139917969421722394e-10, -2.4282622309849460077e-07, -4.6326388656050061690e-05, 9.6744661934198335901e-03, 2.7666864875603666086e-17, 6.1523159058062681925e-01},
	{1.8018817356258256099e-12, 5.9049762483199852743e-10, -2.4048244008561057651e-07, -4.7051360733582518541e-05, 9.5810872721332832058e-03, 3.5129493541656043788e-17, 6.2485948814238634341e-01},
	{1.7838252440927970595e-12, 5.9950714319950101450e-10, -2.3810244130181362353e-07, -4.7769247049257010829e-05, 9.4862654743455565587e-03, 1.1900530313415089333e-17, 6.3439328416364548779e-01},
	{1.7655001150394329332e-12, 6.0842637799639830293e-10, -2.3568658516616622667e-07, -4.8479939492034977700e-05, 9.3900150798706220889e-03, -3.0583412357781072404e-17, 6.4383154288979149715e-01},
	{1.7469091081627638497e-12, 6.1725398601873732253e-10, -2.3323523549771620495e-07, -4.9183331034248678113e-05, 9.2923505836638477240e-03, 1.0092482593124278849e-17, 6.5317284295377675551e-01},
	{1.7280550232000420276e-12, 6.2598863786122068102e-10, -2.3074876146070686177e-07, -4.9879315747719130071e-05, 9.1932866936391272050e-03, -2.1071287894694461066e-17, 6.6241577759017178373e-01},
	{1.7089406995071122208e-12, 6.3462901811740918766e-10, -2.2822753750898216276e-07, -5.0567788819708519286e-05, 9.0928383284539088249e-03, -3.8923746708279248554e-17, 6.7155895484701844111e-01},
	{1.6895690156308144743e-12, 6.4317382557781827174e-10, -2.2567194332959546438e-07, -5.1248646568704603940e-05, 8.9910206152625134213e-03, 3.0059418718413616630e-17, 6.8060099779545302212e-01},
	{1.6699428888754861489e-12, 6.5162177342587458807e-10, -2.2308236378562999890e-07, -5.1921786460034777733e-05, 8.8878488874380330576e-03, -1.4282602472686668870e-17, 6.8954054473706694051e-01},
	{1.6500652748636256188e-12, 6.5997158943170613321e-10, -2.2045918885823982447e-07, -5.2587107121307412750e-05, 8.7833386822631816238e-03, 5.0615356749770612746e-17, 6.9837624940897280457e-01},
	{1.6299391670907879185e-12, 6.6822201614373568003e-10, -2.1780281358792021335e-07, -5.3244508357678164664e-05, 8.6775057385904408314e-03, -4.6689283792585848540e-17, 7.0710678118654757274e-01},
	{1.6095675964747737324e-12, 6.7637181107804764898e-10, -2.1511363801501600174e-07, -5.3893891166938936337e-05, 8.5703659944718416086e-03, -4.9913975300822725602e-17, 7.1573082528381870571e-01},
	{1.5889536308991854379e-12, 6.8441974690550235970e-10, -2.1239206711947684780e-07, -5.4535157754427284003e-05, 8.4619355847587590658e-03, 3.0885123860328980915e-17, 7.2424708295146689174e-01},
	{1.5681003747514144213e-12, 6.9236461163656674716e-10, -2.0963851075986892720e-07, -5.5168211547753887535e-05, 8.3522308386720575668e-03, 2.0624681354171527336e-17, 7.3265427167241281570e-01},
	{1.5470109684551323689e-12, 7.0020520880383589970e-10, -2.0685338361165164225e-07, -5.5792957211346031615e-05, 8.2412682773429727506e-03, -1.2983510651537727581e-17, 7.4095112535495910588e-01},
	{1.5256885879973545886e-12, 7.0794035764221636435e-10, -2.0403710510472895317e-07, -5.6409300660804773532e-05, 8.1290646113250861204e-03, -4.2985133512754117454e-17, 7.4913639452345937020e-01},
	{1.5041364444501480641e-12, 7.1556889326674516303e-10, -2.0119009936028496656e-07, -5.7017149077073710521e-05, 8.0156367380777825138e-03, -1.8146577841271938463e-17, 7.5720884650648456748e-01},
	{1.4823577834870559334e-12, 7.2308966684801722299e-10, -1.9831279512691264839e-07, -5.7616410920417191800e-05, 7.9010017394215547454e-03, -3.0926394103835159030e-17, 7.6516726562245895860e-01},
	{1.4603558848943110936e-12, 7.3050154578519485470e-10, -1.9540562571604603767e-07, -5.8206995944205881430e-05, 7.7851768789655379291e-03, -3.0767033138989249337e-17, 7.7301045336273699338e-01},
	{1.4381340620769122373e-12, 7.3780341387657301464e-10, -1.9246902893670493408e-07, -5.8788815208507530703e-05, 7.6681795995076802719e-03, -8.1032328298380321925e-18, 7.8073722857209448822e-01},
	{1.4156956615596376497e-12, 7.4499417148767564060e-10, -1.8950344702956272683e-07, -5.9361781093481028819e-05, 7.5500275204079181010e-03, 3.6231136432947281849e-17, 7.8834642762660622761e-01},
	{1.3930440624830698706e-12, 7.5207273571685617637e-10, -1.8650932660034631167e-07, -5.9925807312571651548e-05, 7.4307384349347653865e-03, -2.8211359886196721246e-17, 7.9583690460888356633e-01},
	{1.3701826760947109905e-12, 7.5903804055837871104e-10, -1.8348711855257908075e-07, -6.0480808925505434332e-05, 7.3103303075857167456e-03, -3.1192301961028461504e-17, 8.0320753148064494287e-01},
	{1.3471149452352600711e-12, 7.6588903706295450394e-10, -1.8043727801967651476e-07, -6.1026702351080935102e-05, 7.1888212713818533742e-03, 2.5405336711410297415e-17, 8.1045719825259476821e-01},
	{1.3238443438201350859e-12, 7.7262469349570980358e-10, -1.7736026429640467388e-07, -6.1563405379756218415e-05, 7.0662296251370829842e-03, -1.2981802802526013275e-17, 8.1758481315158371139e-01},
	{1.3003743763163128881e-12, 7.7924399549156169619e-10, -1.7425654076971209609e-07, -6.2090837186029319405e-05, 6.9425738307024014578e-03, -2.4594922166502541697e-17, 8.2458930278502529099e-01},
	{1.2767085772145704104e-12, 7.8574594620797716833e-10, -1.7112657484894553198e-07, -6.2608918340610242759e-05, 6.8178725101856107668e-03, 3.3406265741450533627e-18, 8.3146961230254523567e-01},
	{1.2528505104972026249e-12, 7.9212956647509449734e-10, -1.6797083789545973336e-07, -6.3117570822382768774e-05, 6.6921444431468912750e-03, -3.3611332762841113082e-17, 8.3822470555483807875e-01},
	{1.2288037691013002630e-12, 7.9839389494318225762e-10, -1.6478980515163217476e-07, -6.3616718030154128486e-05, 6.5654085637706759843e-03, -4.1667390067450870041e-17, 8.4485356524970711689e-01},
	{1.2045719743776668644e-12, 8.0453798822741505637e-10, -1.6158395566929332219e-07, -6.4106284794190819911e-05, 6.4376839580142274436e-03, -5.1300982043865080072e-17, 8.5135519310526519554e-01},
	{1.1801587755454559332e-12, 8.1056092104994418193e-10, -1.5835377223758319588e-07, -6.4586197387538952673e-05, 6.3089898607333648808e-03, -4.6189931375379960708e-17, 8.5772861000027211809e-01},
	{1.1555678491426130208e-12, 8.1646178637924052068e-10, -1.5509974131024500024e-07, -6.5056383537127223629e-05, 6.1793456527857639621e-03, 4.3494196460862447486e-17, 8.6397285612158669643e-01},
	{1.1308028984722018980e-12, 8.2223969556669061388e-10, -1.5182235293236720302e-07, -6.5516772434650992095e-05, 6.0487708581122732673e-03, -3.9866648795899354714e-17, 8.7008699110871146054e-01},
	{1.1058676530447008469e-12, 8.2789377848042362406e-10, -1.4852210066658428100e-07, -6.5967294747235733464e-05, 5.9172851407966785622e-03, 7.9084815803240018738e-18, 8.7607009419540660122e-01},
	{1.0807658680163522762e-12, 8.3342318363635018574e-10, -1.4519948151874817598e-07, -6.6407882627878312711e-05, 5.7849083021043658931e-03, -1.7794258715656270901e-17, 8.8192126434835504956e-01},
	{1.0555013236236494667e-12, 8.3882707832639246091e-10, -1.4185499586308102248e-07, -6.6838469725664532766e-05, 5.6516602775003206560e-03, 1.4867183571936736031e-17, 8.8763962040285393496e-01},
	{1.0300778246140480938e-12, 8.4410464874388730495e-10, -1.3848914736682058211e-07, -6.7258991195761277265e-05, 5.5175611336469240764e-03, -2.0412408421456564572e-18, 8.9322430119551532446e-01},
	{1.0044991996729839128e-12, 8.4925510010614227663e-10, -1.3510244291436981959e-07, -6.7669383709181960170e-05, 5.3826310653819859839e-03, 2.8404268484015927667e-17, 8.9867446569395381673e-01},
	{9.7876930084728727953e-13, 8.5427765677412691510e-10, -1.3169539253096200237e-07, -6.8069585462323588211e-05, 5.2468903926774735844e-03, -4.5102278448705803056e-18, 9.0398929312344333820e-01},
	{9.5289200296507952938e-13, 8.5917156236928160246e-10, -1.2826850930585273238e-07, -6.8459536186274202855e-05, 5.1103595575794037373e-03, -1.5764813653500911234e-18, 9.0916798309052238025e-01},
	{9.2687120305223764661e-13, 8.6393607988742488361e-10, -1.2482230931505063591e-07, -6.8839177155889129714e-05, 4.9730591211293419598e-03, -3.4193277029435825592e-17, 9.1420975570353069095e-01},
	{9.0071081974551608202e-13, 8.6857049180974373370e-10, -1.2135731154359825262e-07, -6.9208451198634775010e-05, 4.8350097602679878092e-03, -2.4362368371132813281e-17, 9.1911385169005777040e-01},
	{8.7441479270241568710e-13, 8.7307410021084940227e-10, -1.1787403780741469086e-07, -6.9567302703198586732e-05, 4.6962322647213011403e-03, 1.9790052698324352441e-17, 9.2387953251128673848e-01},
	{8.4798708200788478450e-13, 8.7744622686388229064e-10, -1.1437301267471210623e-07, -6.9915677627863960768e-05, 4.5567475338696462883e-03, -2.1151067901678014673e-17, 9.2850608047321558924e-01},
	{8.2143166757794506952e-13, 8.8168621334265024936e-10, -1.1085476338699770318e-07, -7.0253523508648641881e-05, 4.4165765736004260200e-03, 4.4207229213806166480e-17, 9.3299279883473884567e-01},
	{7.9475254856033119970e-13, 8.8579342112078571681e-10, -1.0731981977967309154e-07, -7.0580789467205697963e-05, 4.2757404931446666915e-03, -3.4395197077897555432e-17, 9.3733901191257495977e-01},
	{7.6795374273223383866e-13, 8.8976723166790453478e-10, -1.0376871420224298876e-07, -7.0897426218485536131e-05, 4.1342605018980498749e-03, -2.5711062450005239944e-17, 9.4154406518302080631e-01},
	{7.4103928589523682890e-13, 8.9360704654275537767e-10, -1.0020198143814535145e-07, -7.1203386078158093300e-05, 3.9921579062268518906e-03, 4.8213678366728029774e-17, 9.4560732538052127971e-01},
	{7.1401323126754068319e-13, 8.9731228748334180403e-10, -9.6620158624214993000e-08, -7.1498622969793927304e-05, 3.8494541062592869431e-03, -5.3509110091453205110e-18, 9.4952818059303667475e-01},
	{6.8687964887356276630e-13, 9.0088239649400731439e-10, -9.3023785169792691551e-08, -7.1783092431803110795e-05, 3.7061705926627248366e-03, -2.2978638140431143557e-17, 9.5330604035419386211e-01},
	{6.5964262493100635657e-13, 9.0431683592946666520e-10, -8.9413402675492189241e-08, -7.2056751624131019918e-05, 3.5623289434072741982e-03, 4.2774233822974710581e-17, 9.5694033573220882438e-01},
	{6.3230626123549168551e-13, 9.0761508857577382269e-10, -8.5789554851637113313e-08, -7.2319559334709906440e-05, 3.4179508205162221351e-03, 2.6882197719381016551e-17, 9.6043051941556578655e-01},
	{6.0487467454284013517e-13, 9.1077665772821208107e-10, -8.2152787436380153990e-08, -7.2571475985665236910e-05, 3.2730579668038117108e-03, 2.8699836835533635493e-17, 9.6377606579543984022e-01},
	{5.7735199594910630698e-13, 9.1380106726609631553e-10, -7.8503648113516979613e-08, -7.2812463639275985675e-05, 3.1276722026008538062e-03, 4.0739371765652562851e-17, 9.6697647104485207059e-01},
	{5.4974237026845005071e-13, 9.1668786172447485885e-10, -7.4842686430007025441e-08, -7.3042486003687960203e-05, 2.9818154224686668936e-03, 2.0615362121670564693e-17, 9.7003125319454397424e-01},
	{5.2204995540894286417e-13, 9.1943660636272055865e-10, -7.1170453713213742497e-08, -7.3261508438379142265e-05, 2.8355095919018352170e-03, -2.9054569355139732185e-17, 9.7293995220556017678e-01},
	{4.9427892174640166109e-13, 9.2204688723000170920e-10, -6.7487502987876747246e-08, -7.3469497959376516417e-05, 2.6887767440202867131e-03, -2.3309674162166816204e-17, 9.7570213003852857003e-01},
	{4.6643345149634613554e-13, 9.2451831122762096735e-10, -6.3794388892828339374e-08, -7.3666423244223274498e-05, 2.5416389762511872388e-03, -1.9354300943994708926e-17, 9.7831737071962765473e-01},
	{4.3851773808417246763e-13, 9.2685050616821491122e-10, -6.0091667597466868178e-08, -7.3852254636695840464e-05, 2.3941184470011472353e-03, 2.0821278987315564756e-17, 9.8078528040323043058e-01},
	{4.1053598551363823575e-13, 9.2904312083180410872e-10, -5.6379896717999739081e-08, -7.4026964151270051502e-05, 2.2462373723192486687e-03, 4.4449561705433422721e-17, 9.8310548743121628501e-01},
	{3.8249240773375572315e-13, 9.3109582501868521719e-10, -5.2659635233468441504e-08, -7.4190525477335668718e-05, 2.0980180225513892465e-03, 2.5440063111024199336e-17, 9.8527764238894122162e-01},
	{3.5439122800418616150e-13, 9.3300830959915818679e-10, -4.8931443401568343314e-08, -7.4342913983158607528e-05, 1.9494827189864504489e-03, -5.0043307298177799339e-17, 9.8730141815785843473e-01},
	{3.2623667825923255365e-13, 9.3478028656007967511e-10, -4.5195882674275963935e-08, -7.4484106719590399866e-05, 1.8006538304947930940e-03, -3.8694172813141966799e-17, 9.8917650996478101444e-01},
	{2.9803299847052589028e-13, 9.3641148904823719320e-10, -4.1453515613296358848e-08, -7.4614082423524291893e-05, 1.6515537701595884960e-03, 1.7691540046823098571e-17, 9.9090263542778000971e-01},
	{2.6978443600850108984e-13, 9.3790167141053653826e-10, -3.7704905805343406982e-08, -7.4732821521097380908e-05, 1.5022049919014902365e-03, 3.3393521960057681633e-17, 9.9247953459870996706e-01},
	{2.4149524500275858724e-13, 9.3925060923099465477e-10, -3.3950617777265713120e-08, -7.4840306130638303557e-05, 1.3526299870971556904e-03, -1.6661237135970620972e-17, 9.9390697000235606051e-01},
	{2.1316968570140795122e-13, 9.4045809936453802757e-10, -3.0191216911030949920e-08, -7.4936520065360231395e-05, 1.2028512811921286164e-03, -4.0180502788171254630e-17, 9.9518472667219692873e-01},
	{1.8481202382949044036e-13, 9.4152395996759368204e-10, -2.6427269358581407917e-08, -7.5021448835798509739e-05, 1.0528914303085887012e-03, 1.3645359999741507166e-17, 9.9631261218277800129e-01},
	{1.5642652994657624640e-13, 9.4244803052547568661e-10, -2.2659341956573601274e-08, -7.5095079651992682301e-05, 9.0277301784848316014e-04, 1.1475735157069744678e-17, 9.9729045667869020697e-01},
	{1.2801747880363409242e-13, 9.4323017187655681784e-10, -1.8888002141014743959e-08, -7.5157401425412684770e-05, 7.5251865109254997225e-04, 3.0248208666994238004e-17, 9.9811811290014917919e-01},
	{9.9589148699269426604e-14, 9.4387026623322662880e-10, -1.5113817861808983832e-08, -7.5208404770628665232e-05, 6.0215095779574329734e-04, -9.9775650265663702078e-18, 9.9879545620517240501e-01},
	{7.1145820835428311154e-14, 9.4436821719962930335e-10, -1.1337357497226224199e-08, -7.5248082006724444993e-05, 4.5169258277957786236e-04, -4.0543351427919425693e-17, 9.9932238458834954375e-01},
	{4.2691778672664282181e-14, 9.4472394978618108943e-10, -7.5591897683064616815e-09, -7.5276427158454213215e-05, 3.0116618452190178261e-04, -2.7535589347104555332e-17, 9.9969881869620424997e-01},
	{1.4231307285064850879e-14, 9.4493741042086276204e-10, -3.7798836532124774066e-09, -7.5293435957142374067e-05, 1.5059443174461294959e-04, 4.0247340847553955117e-17, 9.9992470183914450299e-01}
};

// NOTE: For slightly better accuracy for small x in sin_quarter, don't just scale x!
//       Instead do this as: 2*x + x*(c1_high + (c1_low + x2*(c3 + x2*(c5 + x2*(c7 + x2*c9)))))
// a = (tau/4)
// c1_high = double(+a)
// c1_low = double(a-c1_high)
// c3 = double(-a^3 / 6)
// c5 = double(+a^5 / 120)
// c7 = double(-a^7 / 5040)
// c9 = double(+a^9 / 362880)
static const double sinq_c1_high = -4.2920367320510338649e-01;
static const double sinq_c1_low = 5.7211887261098317968e-18;
static const double sinq_c3 = -6.45964097506246282e-01;
static const double sinq_c5 = 7.96926262461670476e-02;
static const double sinq_c7 = -4.68175413531868832e-03;
static const double sinq_c9 = 1.60441184787359829e-04;

// NOTE: For slightly better accuracy for small x in cos_quarter, don't just scale x!
//       Instead do this as: 1 + x2*(c2 + x2*(c4 + x2*(c6 + x2*(c8 + x2*c10))))
// a = (tau/4)
// c2 = double(-a^2 / 2)
// c4 = double(+a^4 / 24)
// c6 = double(-a^6 / 720)
// c8 = double(+a^8 / 40320)
// c10 = double(-a^10 / 3628800)
static const double cosq_c2 = -1.23370055013616975e+00;
static const double cosq_c4 = 2.53669507901048030e-01;
static const double cosq_c6 = -2.08634807633529609e-02;
static const double cosq_c8 = 9.19260274839426585e-04;
static const double cosq_c10 = -2.52020423730606066e-05;

// 2/128, which should be exact in floating-point
// Beyond this, the error from the multiplication by x starts to dominate the approximation error
// more than the error from the Chebyshev polynomials
static const double low_taylor_threshold_quarters = 0.015625;

// (128-12)/128, which should be exact in floating-point
static const double high_taylor_threshold_quarters = 0.90625;

// x must be in [0,1]
double cos_quarter(double x) {
	if (x < low_taylor_threshold_quarters) {
		const double x2 = x*x;
		return 1.0 + x2*(cosq_c2 + x2*(cosq_c4 + x2*(cosq_c6 + x2*(cosq_c8 + x2*cosq_c10))));
	}
	if (x >= high_taylor_threshold_quarters) {
		// Subtract x from 1, to map onto sin_quarter.
		// This shouldn't lose any accuracy, since floating-point has
		// more absolute precision near zero.
		x = 1.0-x;
		const double x2 = x*x;
		return 2*x + x*(sinq_c1_high + (sinq_c1_low + x2*(sinq_c3 + x2*(sinq_c5 + x2*(sinq_c7 + x2*sinq_c9)))));
	}

	x *= 128;
	//(*(uint64_t*)&x) += (7ULL<<52);
	// NOTE: Casting to int64_t is faster than casting to size_t on x86
	int64_t index = int64_t(x);
	x -= index;

	// x should be in [0,1)
	const double*const coeffs = cos_quarter_coeffs[index];
	return (((((coeffs[0]*x + coeffs[1])*x + coeffs[2])*x + coeffs[3])*x + coeffs[4])*x + coeffs[5]) + coeffs[6];
}

// x must be in [0,1]
double sin_quarter(double x) {
	if (x < low_taylor_threshold_quarters) {
		const double x2 = x*x;
		return 2*x + x*(sinq_c1_high + (sinq_c1_low + x2*(sinq_c3 + x2*(sinq_c5 + x2*(sinq_c7 + x2*sinq_c9)))));
	}
	if (x >= high_taylor_threshold_quarters) {
		// Subtract x from 1, to map onto cos_quarter.
		// This shouldn't lose any accuracy, since floating-point has
		// more absolute precision near zero.
		x = 1.0-x;
		const double x2 = x*x;
		return 1.0 + x2*(cosq_c2 + x2*(cosq_c4 + x2*(cosq_c6 + x2*(cosq_c8 + x2*cosq_c10))));
	}

	x *= 128;
	//(*(uint64_t*)&x) += (7ULL<<52);
	// NOTE: Casting to int64_t is faster than casting to size_t on x86
	int64_t index = int64_t(x);
	x -= index;

	// x should be in [0,1)
	const double*const coeffs = sin_quarter_coeffs[index];
	return (((((coeffs[0]*x + coeffs[1])*x + coeffs[2])*x + coeffs[3])*x + coeffs[4])*x + coeffs[5]) + coeffs[6];
}

// x must be in [0,1]
void cos_sin_quarter(double x, double* cos_sin) {
	if (x < low_taylor_threshold_quarters) {
		const double x2 = x*x;
		cos_sin[0] = 1.0 + x2*(cosq_c2 + x2*(cosq_c4 + x2*(cosq_c6 + x2*(cosq_c8 + x2*cosq_c10))));
		cos_sin[1] = 2*x + x*(sinq_c1_high + (sinq_c1_low + x2*(sinq_c3 + x2*(sinq_c5 + x2*(sinq_c7 + x2*sinq_c9)))));
		return;
	}
	if (x >= high_taylor_threshold_quarters) {
		// Subtract x from 1, to map onto cos_quarter.
		// This shouldn't lose any accuracy, since floating-point has
		// more absolute precision near zero.
		x = 1.0-x;
		const double x2 = x*x;
		cos_sin[0] = 2*x + x*(sinq_c1_high + (sinq_c1_low + x2*(sinq_c3 + x2*(sinq_c5 + x2*(sinq_c7 + x2*sinq_c9)))));
		cos_sin[1] = 1.0 + x2*(cosq_c2 + x2*(cosq_c4 + x2*(cosq_c6 + x2*(cosq_c8 + x2*cosq_c10))));
		return;
	}

	x *= 128;
	//(*(uint64_t*)&x) += (7ULL<<52);
	// NOTE: Casting to int64_t is faster than casting to size_t on x86
	int64_t index = int64_t(x);
	x -= index;

	// x should be in [0,1)
	const double*const cos_coeffs = cos_quarter_coeffs[index];
	cos_sin[0] = (((((cos_coeffs[0]*x + cos_coeffs[1])*x + cos_coeffs[2])*x + cos_coeffs[3])*x + cos_coeffs[4])*x + cos_coeffs[5]) + cos_coeffs[6];
	const double*const sin_coeffs = sin_quarter_coeffs[index];
	cos_sin[1] = (((((sin_coeffs[0]*x + sin_coeffs[1])*x + sin_coeffs[2])*x + sin_coeffs[3])*x + sin_coeffs[4])*x + sin_coeffs[5]) + sin_coeffs[6];
}

double cos_quarters(double x) {
	static_assert(sizeof(double) == sizeof(uint64_t), "The following code assumes that double and int64_t are the same size, to deal with the sign bit.");
	// cos is symmetric, so clear the sign bit
	(*(uint64_t*)&x) &= ~(1ULL<<63);
	// NOTE: x is non-negative, and uint64_t has a larger positive range, so casting to uint64_t is safer.
	// NOTE: However, it's much slower on x86, and since anything 2^55 or above in double-precision is a multiple of 4, can use int64_t, instead.
	int64_t xi = int64_t(x);
	x -= xi;
	if (!(x <= 1.0)) {
		// NOTE: Top bit was already forced to zero, so check for infinity/NaN exponent doesn't need to mask out sign bit.
		if (((*(uint64_t*)&x)>>52) == 0x7FF) {
			if (((*(uint64_t*)&x) & ((1ULL<<52)-1)) == 0) {
				// If infinity, return NaN of same sign
				x = std::numeric_limits<double>::quiet_NaN();
				// The standard requires that sin(infinity) raises FE_INVALID.
				feraiseexcept(FE_INVALID);
			}
			// If NaN, return the original NaN.
		}
		else {
			// Input larger than 2^64, (over 18 quintillion), quarter turns,
			// so each epsilon represents 2^12=4096 quarter turns, or 1024 full turns.
			// Can just return 0 of input's sign.
			x = 0.0;
		}
		return x;
	}
	if (xi & 1) {
		x = 1 - x;
	}
	// If ((xi+1)&2), we need to negate the result.
	uint64_t sign_bit = (uint64_t(((xi+1) & 2) != 0)<<63);
	double result = cos_quarter(x);
	(*(uint64_t*)&result) |= sign_bit;
	return result;
}

double sin_quarters(double x) {
	static_assert(sizeof(double) == sizeof(uint64_t), "The following code assumes that double and int64_t are the same size, to deal with the sign bit.");
	uint64_t sign_bit = ((*(uint64_t*)&x) & (1ULL<<63));
	if (sign_bit) {
		x = -x;
	}
	//(*(uint64_t*)&x) &= ~(1ULL<<63);
	// NOTE: x is non-negative, and uint64_t has a larger positive range, so casting to uint64_t is safer.
	// NOTE: However, it's much slower on x86, and since anything 2^55 or above in double-precision is a multiple of 4, can use int64_t, instead.
	int64_t xi = int64_t(x);
	x -= xi;
	if (!(x <= 1.0)) {
		// NOTE: Top bit was already forced to zero, so check for infinity/NaN exponent doesn't need to mask out sign bit.
		if (((*(uint64_t*)&x)>>52) == 0x7FF) {
			if (((*(uint64_t*)&x) & ((1ULL<<52)-1)) == 0) {
				// If infinity, return NaN of same sign
				x = std::numeric_limits<double>::quiet_NaN();
				// The standard requires that sin(infinity) raises FE_INVALID.
				feraiseexcept(FE_INVALID);
			}
			// If NaN, return the original NaN.
		}
		else {
			// Input larger than 2^64, (over 18 quintillion), quarter turns,
			// so each epsilon represents 2^12=4096 quarter turns, or 1024 full turns.
			// Can just return 0 of input's sign.
			x = 0.0;
		}
		(*(uint64_t*)&x) |= sign_bit;
		return x;
	}
	if (xi & 1) {
		x = 1 - x;
	}
	// If (xi&2), we need to negate the result.
	sign_bit ^= (uint64_t((xi & 2) != 0)<<63);
	double result = sin_quarter(x);
	(*(uint64_t*)&result) |= sign_bit;
	return result;
}

void cos_sin_quarters(double x, double* cos_sin) {
	static_assert(sizeof(double) == sizeof(uint64_t), "The following code assumes that double and int64_t are the same size, to deal with the sign bit.");
	uint64_t sin_sign_bit = ((*(uint64_t*)&x) & (1ULL<<63));
	(*(uint64_t*)&x) &= ~(1ULL<<63);
	// NOTE: x is non-negative, and uint64_t has a larger positive range, so casting to uint64_t is safer.
	// NOTE: However, it's much slower on x86, and since anything 2^55 or above in double-precision is a multiple of 4, can use int64_t, instead.
	int64_t xi = int64_t(x);
	x -= xi;
	if (!(x <= 1.0)) {
		// NOTE: Top bit was already forced to zero, so check for infinity/NaN exponent doesn't need to mask out sign bit.
		if (((*(uint64_t*)&x)>>52) == 0x7FF) {
			if (((*(uint64_t*)&x) & ((1ULL<<52)-1)) == 0) {
				// If infinity, return NaN of same sign
				x = std::numeric_limits<double>::quiet_NaN();
				// The standard requires that sin(infinity) raises FE_INVALID.
				feraiseexcept(FE_INVALID);
			}
			// If NaN, return the original NaN.
		}
		else {
			// Input larger than 2^64, (over 18 quintillion), quarter turns,
			// so each epsilon represents 2^12=4096 quarter turns, or 1024 full turns.
			// Can just return 0 of input's sign.
			x = 0.0;
		}
		cos_sin[0] = x;
		(*(uint64_t*)&x) |= sin_sign_bit;
		cos_sin[1] = x;
		return;
	}
	if (xi & 1) {
		x = 1 - x;
	}
	// If ((xi+1)&2), we need to negate the result.
	uint64_t cos_sign_bit = (uint64_t(((xi+1) & 2) != 0)<<63);
	sin_sign_bit ^= (uint64_t((xi & 2) != 0)<<63);
	cos_sin_quarter(x, cos_sin);
	(*(uint64_t*)&cos_sin[0]) |= cos_sign_bit;
	(*(uint64_t*)&cos_sin[1]) |= sin_sign_bit;
}
